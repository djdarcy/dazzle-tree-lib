name: CI

on:
  push:
    branches: [ main, dev, staging ]
  pull_request:
    branches: [ main, dev ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/setup.py', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 dazzletreelib tests --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 dazzletreelib tests --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true

    - name: Type check with mypy
      run: |
        pip install mypy
        mypy dazzletreelib --ignore-missing-imports
      continue-on-error: true

    - name: Run tests with coverage
      run: |
        pip install pytest-cov
        pytest --cov=dazzletreelib --cov-report=term-missing --cov-report=html --cov-report=xml
      env:
        PYTHONPATH: ${{ github.workspace }}

    - name: Upload coverage reports
      if: matrix.python-version == '3.11'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: htmlcov/

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        pip install twine
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/